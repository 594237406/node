1.新建目录，进入目录-命令行
git init 到工作目录

2.工作目录：
git add .   //提交所有改动到缓存区
.gitignore  //忽略:里面写正则表达式忽略文件名,通过git bush-vim .gitignore-创建

3.缓存区index  git commit -m "代码提交信息"  //提交到head仓库

4.git remote add origin 远程推送地址        //只对init目录执行，设置远程提交地址

5.git push origin master                   //推送到远程地址

6.git status                               //看状态

7.不用输入用户名密码，方法：

git remote rm origin                       //删除推送地址重新设置

git remote add origin https://594237406:jdkn45263@github.com/594237406/senior.git


8.add与commit合并:git commit -a -m ""

9.更新代码 git pull

10.对比代码 git diff



11.
It seems that there is already a rebase-apply directory, and
I wonder if you are in the middle of another rebase. If that is the
case, please try
git rebase (--continue | --abort | --skip)
If that is not the case, please
rm -fr "/Users/lihongji/work/ado-fe/.git/rebase-apply"
and run me again. I am stopping in case you still have something
valuable there.

git rebase --abort

12.分支
git branch 
git branch -b
git chechout
git merge
git 


13.
1.git pull 分支

git add .
git rebase --continue     //切换到主干
git push

git config -e --globle

14.
git merge origin master //将origin merge 到 master 上
git merge origin/master //将origin上的master分支 merge 到当前 branch 上


15.
创建远程分支：推送到远程分支
git push origin head:newbranch_name


16.
$git checkout -b rc-0.1 origin/rc-0.1
3。 Merge分支的稳定的master分支
Ruby代码
$git merge master

4。 提交到远程分支
Ruby代码
$git push origin rc-0.1

17.
在rebase的过程中，也许会出现冲突(conflict). 在这种情况，Git会停止rebase并会让你去解决 冲突；在解决完冲突后，用"git-add"命令去更新这些内容的索引(index), 然后，你无需执行 git-commit,只要执行:
$ git rebase --continue
这样git会继续应用(apply)余下的补丁。
在任何时候，你可以用--abort参数来终止rebase的行动，并且"mywork" 分支会回到rebase开始前的状态。
$ git rebase --abort

18.
如果是 rebase 的话
git add .
git commit -m "fix"
git push origin branchName
如果无法推上去
git fetch
git rebase
如果有冲突
解决冲突
git add .
git rebase --continue
git push origin branchName